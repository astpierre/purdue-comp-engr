/******************************************************************************
 * FILENAME: 
 * WRITTEN BY:
 * LAST MODIFIED: 
 * ***************************************************************************/

/**************************************
 * FILE OPENING/CLOSING 
 * ***********************************/
FILE * fptr;
fptr = fopen(filename, "r"); 	// r = read, w = write, a = append
fclose(fptr); 					// Closing file

/**************************************
 * STREAM
 * ***********************************/

do {
	int ch;
	ch = fgetc(fptr);
	// ...
} while (ch != EOF);			// Will not work if char ch... needs int

/* OR */
while (!feof(fptr))
{
	// ...
}

/**************************************
 * ASCII to INT CONV.
 * ***********************************/
// ex1. reading char by char '1234'
// 1 = '1' - '0'
// ex2. using fscanf
int x;
fscanf(fptr, "%d", &x);
// x will be 1234 (number)


/**************************************
 * Heap Memory 
 * ***********************************/
char * ptr;
ptr = malloc(sizeof(char)*numElem);
// * 1. creates ptr in stack mem
// * 2. heap mem returns start value of address in heap
// * 3. ptr's value stores an address (heap)

// Alternate method
ptr = malloc(sizeof(*ptr)*numElem);




/******************************************************************************
 * FILENAME:
 * WRITTEN BY:
 * LAST MODIFIED:
 * ***************************************************************************/

/**************************************
 * QSORT
 * ***********************************/
qsort(void *base, size_t nmemb, size_t size, int (*compare));
&arr[k] = &arr[0] + k * sizeof(element);
// Transitivity means... (a>b), (b>c) --> (a>c)

/**************************************
 * COMPARISSON FUNCTION
 * ***********************************/
// void * --> address (don't know the type)
// 1. convert the type
// 2. retrieve their values
// 3. compare

/**************************************
 * RECURSION
 * ***********************************/
//          YOU
//    FATHER    MOTHER
//
//    1. repeating problem


/******************************************************************************
 * FILENAME:        "october_2.c" 
 * WRITTEN BY:      Andrew St. Pierre
 * LAST MODIFIED:   Tuesday, October 2, 2018
 * ***************************************************************************/
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
// ===============
// strlen() usage
// ===============
int strlen(char * s)
{
    // iterates through array until null terminator '\0'
    int len = 0;
    while(s != '\0')
    {
        s++;
        len++;
    }
    return len;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
// ===============
// strcpy() usage
// ===============
void use_strcpy(void)
{
    char * name2;
    // NOTE: + 1 to the strlen to account for '\0'
    name2 = malloc(sizeof(char)*(strlen("Colleen")+1);
    strcpy(name2, "Colleen");
    for(int i=0; i<strlen("Colleen"); i++)
    {  printf("%c",name2[i]);  }
}
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
// COMMON MISTAKES ===========================================================
// 1. do not have enough space because strlen() does not count '\0'
// 2. strdup() forget to free
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
// =======================
// Other string functions 
// =======================
// strstr()     => finds the first occur of substr needle in str haystack
// strrstr()    => does strstr, but starts searching reverse orders
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
// Example use of strstr()
char * p = strstr(str1, str2);
if(p != NULL) p++;
p = strstr(p,str2);
return NULL;
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
// NOTE: buffer overflow attack, first computer virus
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
// C's minimum unit is a byte (8-bits)
//   one bit => either 0 or 1
// read / write at least one byte
// ===========================================================================
//  ie. R-G-B colors for one pixel
//      RED         GREEN       BLUE
//      1-byte      1-byte      1-byte
//
//      EACH PIXEL == 24-bits, or 3 bytes
//      post-compression... a pixel can be just 8-bits
//
//             BITMASKING:
//       RED                  GREEN                BLUE
//      |8|7|6|5|4|3|2|1|0|  |8|7|6|5|4|3|2|1|0|  |8|7|6|5|4|3|2|1|0| 
//      |1|1|1|0|0|0|0|0|0|  |1|1|1|0|0|0|0|0|0|  |1|1|1|0|0|0|0|0|0| 
//      |8|7|6|0|0|0|0|0|0|  |8|7|6|0|0|0|0|0|0|  |8|7|6|0|0|0|0|0|0| 
//
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/










//=============================================================================
//== FILENAME:          "october_4.c"
//== WRITTEN BY:        Andrew St. Pierre
//== LAST MODIFIED:     Thursday, October 4, 2018
//=============================================================================

//===========================
//== CONVERTING NUMBER BASES
//===========================
//
// Decimal (base-10) to any base N system
//   1. Divide the decimal number by the value of the new base
//   2. Get the remainder from step 1 as the rightmost digit (LSB) of new num
//   3. Divide the quotient of the previous divide by the neew base
//   4. Record the remainder from step 3 as the next rightmost digt of new num
//   N. Repeat steps 3,4 until the quotient becomes zero in step 3
//   5. The last remainder thus obtained is the MSB of new based num
//
//  Example:
//      Convert 4_BASE(10) to base 2 (binary).
//       STEP:                          NEW NUMBER:
//       4/2=2, remainder 0             __0
//       2/2=1, remainder 0             _00
//       1/2=0, remainder 1             100
//      RESULT: 0x100
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//===========================
//== BIT MASKING (colors)
//===========================
// Sign bit is the left most bit in a binary number. 
//  If sign bit == 1, number assumes negative value
//  Else, number assumes positive value
 
// NOTE: must use unsigned char when completing assignment 10
 
// Bit masking:
//  mask:           |1|1|0|0| |0|0|0|0| 
//  oneyte:         |x|y|a|b| |c|d|e|f| 
//  first2bits:     |x|y|0|0| |0|0|0|0| 
unsigned char onebyte;
fread(&onebyte, 1, 1, fptr);
unsigned char mask = 0xc0;
unsigned char first2bits = onebyte & mask;

// IMAGE MODIFICATION OF COLORS (FILTERS)
//  ---------------------------------------------------------
//  R                   G                   B
//  |0|0|0|0|0|0|0|0|   |0|0|0|0|0|0|0|0|   |0|0|0|0|0|0|0|0| 
unsigned char red;
unsigned char green;
unsigned char blue;
// read from file
unsigned char mask = 0xc0;
unsigned char red2bits = red & mask;
unsigned char green2bits = green & mask;
unsigned char blue2bits = blue & mask;

// shift bits right, ex. |1|1|0|0|0|0|0|0| => |0|0|1|1|0|0|0|0| 
green2bits >>= 2;   // green2bits = green2bits >> 2;

//  |A|B|0|0|0|0|0|0| red2bits
//  |0|0|C|D|0|0|0|0| green2bits
//  |0|0|0|0|E|F|0|0| blue2bits
//  |0|0|0|0|0|0|G|H| secondred2bits
unsigned char newbyte = red2bits | green2bits | blue2bits | secondred2bits;
//  |A|B|C|D|E|F|G|H| newbyte

// common mistake:
unsigned char mask = 0x80;                  // |1|0|0|0|0|0|0|0|
unsigned char firstbit = 0xFF&mask;         // |1|0|0|0|0|0|0|0|
if (firstbit == 1) { /* WILL NEVER REACH HERE BECAUSE BYTE == 128 */ }
// should use: if(firstbit != 0) because then the first bit MUST (recall mask)

//===========================
//== IMAGE MANIPULATION
//===========================
// BMP IMAGE STRUCTURE:
// ------------------------------------
// header       -> metadata (size,w,h,bits,etc)
// ------------------------------------
// data pixel   -> 

// When working with a BMP image, first scan the header for information
// about how to handle this image. (size, colors, etc)
// THEN, scan the data. (2 passes (at least))

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//=============================================================================
//== FILENAME:          "october_11.c"
//== WRITTEN BY:        Andrew St. Pierre 
//== LAST MODIFIED:     11/10/2018 13:35:55
//=============================================================================

//===========================
//== THE WHY
//===========================
// GOOD READ: End-to-End Arguments in System Design
// LINK: "http://web.mit.edu/Saltzer/www/publications/endtoend/endtoend.pdf"

// Why C? Because... It is the #4 most popular programming language and many 
// of the other languages are based on it... ex. C# or C++


//===========================
//== BITWISE OPERATION 
//===========================
// Compression-> lossless compression 
//  Why? prevent waste in network usage
//  How? encode in ASCII (8-bits per letter)
//      In english, which letters appear most often?
//          a,e,i,o,u
//      In english, which letters appear less often?
//          z,q,x
//      Make common cases faster. Make rare cases correct.
//      Use few bits for common characters. Use more bits for rare.
//      GOAL: use fewer bits
//  ex.      
//        0/  \1        So, 0->a, 100->c, 101->d, 110->q 111->x
//        a    \
//          0/   \1
//          /     \
//        0/ \1 0/ \1
//        c  d  q   x

//===========================
//== Image processing (pg 385) 
//===========================
//  __________
//  | HEADER |  <= how many bytes to read, run check using checkHeaderValid()
//  |--------|
//  |        |  
//  |  DATA  |   
//  |        |  - Why read header and data seperately? Because the header tells
//  |        |    us how much data to read. 2 seperate fread()'s'
//  |________|

// Debugging programs dealing with images/bmp
//  To read a file as hexadecimal or bits, use:
//      $   xxd -b | less
//      $   xxd  | less


//===========================
//== Dynamic Structures 
//===========================
// concept: allocate memory when needed
//          release memory when no longer needed
// characteristics: 
//  1. fixed numer
//  2. after program starts
//  3. you never know the size

typedef struct listnode
{
    struct listnode * next;
    data; // self refering
    // ...
} Node;


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//=============================================================================
//== FILENAME:          "october_18.c"
//== WRITTEN BY:        Andrew St. Pierre
//== LAST MODIFIED:     18/10/2018 14:03:32
//=============================================================================

//===========================
//== Linked Lists
//===========================
// Inserting at the beginning of linked list
// Option 1:
Node * List_insert(Node * h, int v)
{
    // ...
}

Node * head = NULL;
head = List_insert(head,264);
// Option 2:
void List_insert(Node ** h, int v)
{
    Node * p = malloc();
    p->next = *h;
    *h=p;
}
Node * head = NULL;
List_insert(&head,264);

// Insert at end of linked list
Node * List_insert2(Node * h, int n)
{
    Node * p = malloc();
    p->value = v;
    p->next = NULL;

    // If empty...
    if(h==NULL) return p;
    Node * q = h;
    
    // Traversing the linked list
    while((q->next) != NULL) q = q->next;
    
    // q is the last node now
    q->next = p;

    // Return the head
    return h;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Inserting in a sorted linked list
if((v<(h->value))) // New node at beginning
{
    p->next = h;
    return p;
}
Node * r = h->next;
while((r != NULL) && ((r->value)<v)) 
{  r = r->next; q = q->next  }
// q is the node before p
q->next = p;
p->next = r;
return h;

// Searching a linked list
Node * List_search(Node * h, v)
{
    // Search the list for value v
    // If found, return the pointer of the node
    // If not, return NULL
    // If u appears multiple times, return the first

    // Note: h is a second node pointer that does not change head
    //       only changes the pointer location of h
    while((h != NULL) && ((h->value) != v)) h=h->next;

    return h;
}

// How are we going to use this? 
Node * head = NULL;
Node * p;
// By creating another pointer p, you will not lose the list
p = List_search(head, 264);

// How about deleting from a Linked List?
Node * List_delete(Node * h, v)
{
    // If noting in list, do nothing, return
    if(h == NULL) return NULL;

    // If the node is the very first node case
    if((h->value) == v)
    {  Node * p = h->next; free(h); return p;  }

    // Normal case
    Node * q = h;
    Node * r = h->next;

    // Traversing
    while((r != NULL) && ((r->value) != v))
    {
        q = q->next;
        r = r->next;
    }

    if(r == NULL) return h;

    // Order is important here
    // will get segmentation fault
    q->next = r->next;
    free(r);

    return h;
}







    


    return;
}


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//=============================================================================
//== FILENAME:          "october_25.c"
//== WRITTEN BY:        Andrew St. Pierre 
//== LAST MODIFIED:     25/10/2018 13:44:00
//=============================================================================

// ----------------------------------------------------------------------------
//===========================
//== Doubly-linked Lists 
//===========================
typedef struct listnode
{
    struct listnode * next;
    struct listnode * previous;
    int data;
    // ... <more-associated-values>
} Node;
// DOUBLY LINKED LISTS:
//  HEAD --> |_| <--> |_| <-- TAIL 
Node * p;
Node * q; 
// Advantage of doubly linked lists:
if(p==(q->next))
{  q == p->prev;  }

// Not a huge advange... why?
//  If you are performing a search on LL, no avoiding long traversals...
//  So, what is the solution??? Binary trees
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
//===========================
//== Binary trees 
//===========================
typedef struct treenode
{
    struct treenode * left;
    struct treenode * right;
    int data;
    // ...
} TNode;
// ----------------------------------------------------------------------------
// Keep track of root node, giving us access to rest of data
treenode * root = NULL;
/*  BALANCED TREE:
                ---         2^0 = 1
               /   \        2^1 = 2
              / \  / \      2^2 = 4
             /\ /\/\ /\     2^3 = 8
*/
// For m nodes, height=log_2(m)
//   Binary search tree has a property where all nodes to left of 'd' are
//   less than 'd'. And 'd' is less than 'd3'
// ----------------------------------------------------------------------------
// Binary search trees:
//     |= root (has no parent)
//    / \
//   P   Z
//  /\   /\
// Q       <-- Q is P's "left-child" and called a "leaf"
// 
// P is called Q's "ancestor" if P is Q's parent or X is Q's ancestor and
// P is X's parent... i.e. has inheritance property.
// Root has no parent
// Leaf has no child
// ----------------------------------------------------------------------------
// Binary search trees (cont.)
//  - each node has a key
//  - keys must be totally ordered
//      |_ Totally ordered set S where a and b are members in the set,
//         and a>b, or a==b, or a<b
//  - wrong if for each node, key of the left chile is less than key
//    of the node or less than key of right child (not necesarilly a b.s.t.)
//  Inserting numbers in a binary search tree...
//      ex. 23,17,36,4,18,42,9,15,82
//          
//          23
//        /    \
//       17    36  
//      /  \     \
//     4   18    42
//      \          \
//       9         82
//        \
//        15

// Create a tree node and initialize values
TNode * TreeNodeCreate(v)
{
    TNode * p;
    p = malloc(sizeof(TNode));
    p->left=NULL;
    p->right=NULL;
    p->value=v;
    return p;
}

// Insert a node w. value v in binary search tree root r
TNode * TreeInsert(TNode * r, int v)
{
    // If tree is empty (exit condition)
    if(r==NULL) return TreeNodeCreate(v);

    // If value same as root, do not insert again
    if((r->value)==v) return r;

    // If not same... insert with recursion
    if((r->value) < v) r->right = TreeInsert(r->right,v);
    else r->left = TreeInsert(r->left,v);
}

// example
TNode * root = NULL;
root = TreeInsert(root,23);
root = TreeInsert(root,17);
//  NULL  -->  23  -->     23    
//                        /
//                       17

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//=============================================================================
//== FILENAME:          "notebook"
//== WRITTEN BY:        Andrew St. Pierre
//== LAST MODIFIED:     13/11/2018 13:41:33
//=============================================================================

//===========================
//== Clustering Data
//===========================

    Recall k-means clustering...
        1. how to choose k
        2. outliers
        3. how to start
        4. long time to converge
        5. sensitive to points at boundary
        6. points in different groups may be 
           closer than points in the same group
        
        ... many weaknesses

    Alternative method for clustering data: 
    ======================
    Hierarchial Clustering
    ======================
        suppose some data: 
            .   .    ..         ..  .
            ..   ...        . ...   .
        
        pairwise distance:
            -> find the smallest -> siblings of a
                binary tree
        create a distance table:
            A   B   C   D   E   F   G
        A | O   x
        B | x   O
        C |         O
        D |             O
        E |                 O
        F |                     O
        G |                         O
          x = distance(A->B) <=IS SAME=> distance(B->A)
            = (x_1-y_1)^2 + (x_2-y_2)^2 + ... + (x_n-y_n)^2

        O- node     ---->               /----\
       / \                             /      \
      A   B                           / \    / \
                                     /   \  G   \
                                    /     \      H
                                   / \     \
                                  /   \     \
                                 /\    \   / \
                                /  \   |  /\  \
                               A    B  C  D E  F

         => If data is very scattered, tree will be very tall
            b/c there is few clusters
         
         => Only leaf nodes contain data
            Non-leaf nodes have no data 'Null'
         
         => Even the slightest change in distance will change 
            horizontal distance... too sensitive
            Only vertical distance is an accurate indicator of
            relations

    
//=============================================================================
//== WRITTEN BY:        Andrew St. Pierre
//== LAST MODIFIED:     15/11/2018 13:36:33
//=============================================================================

// EXAM REVIEW CLASS


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
